name: CI/CD Pipeline - Full Flow with Approval and GitHub Package

on:
  # Eventi che triggerano la pipeline
  push:
    branches:
      - main
  workflow_dispatch: # Trigger manuale per approvazione
    inputs:
      environment:
        description: 'Environment to deploy'
        default: 'production'
        required: true

permissions:
  id-token: write
  contents: read
  packages: write
  pull-requests: read

jobs:
  build-main-image:
    name: Build Docker Image for Main
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Define MAIN Tag
        run: |
          MAIN_TAG="main.${{ github.run_number }}.$(date +%Y%m%d)"
          echo "MAIN_TAG=$MAIN_TAG" >> $GITHUB_ENV
          echo "Docker image tag: $MAIN_TAG"

      - name: Build Docker Image
        run: |
          cd test-docker
          docker build -t ghcr.io/ffppa/test-runners/test-docker:${{ env.MAIN_TAG }} .

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Push Docker Image
        run: |
          docker push ghcr.io/ffppa/test-runners/test-docker:${{ env.MAIN_TAG }}
          echo "Docker image pushed: ghcr.io/ffppa/test-runners/test-docker:${{ env.MAIN_TAG }}"

  # Fase 3: Test in UAT e promozione a Golden
  uat-and-golden:
    name: Test in UAT and Promote Golden Image
    runs-on: ubuntu-latest
    environment: test
    needs: build-main-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Get Latest Tag from GitHub Container Registry
        id: get-tag
        run: |
          LATEST_TAG=$(gh api -H "Accept: application/vnd.github.v3+json" /user/packages/container/test-runners/versions \
            | jq -r 'map(select(.metadata.container.tags[] | contains("main"))) | first | .metadata.container.tags[] | select(contains("main"))')
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Pull Latest Docker Image by Tag
        run: |
          docker pull ghcr.io/ffppa/test-runners/test-docker:${{ env.latest_tag }}


      - name: Tag Golden Image
        run: |
          docker tag ghcr.io/ffppa/test-runners/test-docker:${{ env.latest_tag }} ghcr.io/ffppa/test-runners/test-docker:golden.${{ env.latest_tag }}
          docker push ghcr.io/ffppa/test-runners/test-docker:golden.${{ env.latest_tag }}

      - name: Deploy to UAT
        run: |
          kubectl apply -f k8s/uat-deployment.yaml
          kubectl rollout status deployment/my-app-uat
        env:
          IMAGE: "ghcr.io/ffppa/test-runners/test-docker:golden.${{ env.latest_tag }}"

  # Fase 4: Deploy in Produzione con approvazione
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: test
    needs: uat-and-golden
    if: github.event.inputs.approve_prod == 'yes'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Get Latest Tag from GitHub Container Registry
        id: get-tag
        run: |
          LATEST_TAG=$(gh api -H "Accept: application/vnd.github.v3+json" /user/packages/container/test-runners/versions \
            | jq -r 'map(select(.metadata.container.tags[] | contains("golden"))) | first | .metadata.container.tags[] | select(contains("golden"))')
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Pull Golden Image
        run: docker pull ghcr.io/ffppa/test-runners/test-docker:golden.${{ env.latest_tag }}"
      - name: Deploy to Production
        run: |
          kubectl apply -f k8s/prod-deployment.yaml
          kubectl rollout status deployment/my-app-prod
        env:
          IMAGE: "ghcr.io/ffppa/test-runners/test-docker:golden.${{ env.latest_tag }}"