name: CI/CD Pipeline - Full Flow with Approval and GitHub Package

on:
  # Eventi che triggerano la pipeline
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch: # Trigger manuale per approvazione
    inputs:
      environment:
        description: 'Environment to deploy'
        default: 'production'
        required: true

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  # Job di validazione per Pull Request (PR Validation)
  pr-validation:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build PR Docker Image
        run: |
          cd test-docker
          docker build -t ghcr.io/ffppa/test-runners/test-docker:PR.${{ github.event.pull_request.number }} .
          echo "Docker image built: PR.${{ github.event.pull_request.number }}"

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Push PR Docker Image to GitHub Container Registry
        run: |
          docker push ghcr.io/ffppa/test-runners/test-docker:PR.${{ github.event.pull_request.number }}

  # Fase 2: Build e Test (DEV)
  build-and-test:
    name: Build and Test for DEV
    runs-on: ubuntu-latest
    environment: test
    needs: pr-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Define MA Tag
        run: |
          MA_TAG="MA.${{ github.run_number }}.$(date +%Y%m%d)"
          echo "MA_TAG=$MA_TAG" >> $GITHUB_ENV

      - name: Pull PR Docker Image
        run: docker pull ghcr.io/ffppa/test-runners/test-docker:PR.${{ github.event.pull_request.number }}

      - name: Tag DEV Image
        run: |
          docker tag ghcr.io/ffppa/test-runners/test-docker:PR.${{ github.event.pull_request.number }} ghcr.io/ffppa/test-runners/test-docker:MA.$MA_TAG
          docker push ghcr.io/ffppa/test-runners/test-docker:MA.$MA_TAG

      - name: Deploy to DEV
        run: |
          kubectl apply -f k8s/dev-deployment.yaml
          kubectl rollout status deployment/my-app-dev
        env:
          IMAGE: "ghcr.io/ffppa/test-runners/test-docker:MA.$MA_TAG"

  # Fase 3: Test in UAT e promozione a Golden
  uat-and-golden:
    name: Test in UAT and Promote Golden Image
    runs-on: ubuntu-latest
    environment: test
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull DEV Image
        run: docker pull ghcr.io/ffppa/test-runners/test-docker:MA.$MA_TAG

      - name: Tag Golden Image
        run: |
          docker tag ghcr.io/ffppa/test-runners/test-docker:MA.$MA_TAG ghcr.io/ffppa/test-runners/test-docker:golden.$MA_TAG
          docker push ghcr.io/ffppa/test-runners/test-docker:golden.$MA_TAG

      - name: Deploy to UAT
        run: |
          kubectl apply -f k8s/uat-deployment.yaml
          kubectl rollout status deployment/my-app-uat
        env:
          IMAGE: "ghcr.io/ffppa/test-runners/test-docker:golden.$MA_TAG"

  # Fase 4: Deploy in Produzione con approvazione
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: test
    needs: uat-and-golden
    if: github.event.inputs.approve_prod == 'yes'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Pull Golden Image
        run: docker pull ghcr.io/ffppa/test-runners/test-docker:golden.$MA_TAG

      - name: Deploy to Production
        run: |
          kubectl apply -f k8s/prod-deployment.yaml
          kubectl rollout status deployment/my-app-prod
        env:
          IMAGE: "ghcr.io/ffppa/test-runners/test-docker:golden.$MA_TAG"
